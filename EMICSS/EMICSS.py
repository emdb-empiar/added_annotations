#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Mon Jul  5 09:25:50 2021 by generateDS.py version 2.38.6.
# Python 3.7.6 (default, Dec 30 2019, 19:38:28)  [Clang 11.0.0 (clang-1100.0.33.16)]
#
# Command line options:
#   ('-o', 'EMICSS.py')
#   ('-s', 'EMICSSsub.py')
#
# Command line arguments:
#   EMDB_EMICSS.xsd
#
# Command line:
#   /usr/local/bin/generateDS.py -o "EMICSS.py" -s "EMICSSsub.py" EMDB_EMICSS.xsd
#
# Current working directory (os.getcwd()):
#   EMICSS
#

import sys
try:
    ModulenotfoundExp_ = ModuleNotFoundError
except NameError:
    ModulenotfoundExp_ = ImportError
from six.moves import zip_longest
import os
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
try:
    from lxml import etree as etree_
except ModulenotfoundExp_ :
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ModulenotfoundExp_ :
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ModulenotfoundExp_ :
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ModulenotfoundExp_ :

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ModulenotfoundExp_ :
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ModulenotfoundExp_ as exp:
    
    class GeneratedsSuper(object):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer values')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return_value = '%s' % input_data
            if '.' in return_value:
                return_value = return_value.rstrip('0')
                if return_value.endswith('.'):
                    return_value = return_value.rstrip('.')
            return return_value
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return ' '.join([self.gds_format_decimal(item) for item in input_data])
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                value = self.gds_parse_boolean(value, node, input_name)
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        if prefix == 'xml':
            namespace = 'http://www.w3.org/XML/1998/namespace'
        else:
            namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element, mapping_=None, nsmap_=None):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self, mapping_=None, nsmap_=None):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class DB_source_type(str, Enum):
    UNIPROT='UNIPROT'
    COMPLEXPORTAL='COMPLEXPORTAL'
    PD_BE='PDBe'
    CHEMBL='CHEMBL'
    CHEBI='CHEBI'
    DRUGBANK='DRUGBANK'


class provenance_type(str, Enum):
    AUTHOR='AUTHOR'
    UNIPROT='UNIPROT'
    PD_BE='PDBe'
    PDBUNIPROT='PDB+UNIPROT'
    BLASTP='BLASTP'
    COMPLEXPORTAL='COMPLEXPORTAL'
    CH_EMBL='ChEMBL'
    CH_EBI='ChEBI'
    DRUG_BANK='DrugBank'
    CALCULATED='CALCULATED'


class sample_kind(str, Enum):
    COMPLEX='complex'
    PROTEIN='protein'
    LIGAND='ligand'


class emicss(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EMDB_ID=None, DBs_list=None, molecular_weight_annotation=None, sample_annotation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.EMDB_ID = _cast(None, EMDB_ID)
        self.EMDB_ID_nsprefix_ = None
        self.DBs_list = DBs_list
        self.DBs_list_nsprefix_ = None
        self.molecular_weight_annotation = molecular_weight_annotation
        self.molecular_weight_annotation_nsprefix_ = None
        self.sample_annotation = sample_annotation
        self.sample_annotation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, emicss)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if emicss.subclass:
            return emicss.subclass(*args_, **kwargs_)
        else:
            return emicss(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DBs_list(self):
        return self.DBs_list
    def set_DBs_list(self, DBs_list):
        self.DBs_list = DBs_list
    def get_molecular_weight_annotation(self):
        return self.molecular_weight_annotation
    def set_molecular_weight_annotation(self, molecular_weight_annotation):
        self.molecular_weight_annotation = molecular_weight_annotation
    def get_sample_annotation(self):
        return self.sample_annotation
    def set_sample_annotation(self, sample_annotation):
        self.sample_annotation = sample_annotation
    def get_EMDB_ID(self):
        return self.EMDB_ID
    def set_EMDB_ID(self, EMDB_ID):
        self.EMDB_ID = EMDB_ID
    def validate_emdb_id_type(self, value):
        # Validate type emdb_id_type, a restriction on xs:token.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_emdb_id_type_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_emdb_id_type_patterns_, ))
    validate_emdb_id_type_patterns_ = [['^(EMD-\\d{4,})$']]
    def hasContent_(self):
        if (
            self.DBs_list is not None or
            self.molecular_weight_annotation is not None or
            self.sample_annotation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='emicss', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('emicss')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'emicss':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='emicss')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='emicss', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='emicss'):
        if self.EMDB_ID is not None and 'EMDB_ID' not in already_processed:
            already_processed.add('EMDB_ID')
            outfile.write(' EMDB_ID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.EMDB_ID), input_name='EMDB_ID')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='emicss', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DBs_list is not None:
            namespaceprefix_ = self.DBs_list_nsprefix_ + ':' if (UseCapturedNS_ and self.DBs_list_nsprefix_) else ''
            self.DBs_list.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DBs_list', pretty_print=pretty_print)
        if self.molecular_weight_annotation is not None:
            namespaceprefix_ = self.molecular_weight_annotation_nsprefix_ + ':' if (UseCapturedNS_ and self.molecular_weight_annotation_nsprefix_) else ''
            self.molecular_weight_annotation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='molecular_weight_annotation', pretty_print=pretty_print)
        if self.sample_annotation is not None:
            namespaceprefix_ = self.sample_annotation_nsprefix_ + ':' if (UseCapturedNS_ and self.sample_annotation_nsprefix_) else ''
            self.sample_annotation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='sample_annotation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('EMDB_ID', node)
        if value is not None and 'EMDB_ID' not in already_processed:
            already_processed.add('EMDB_ID')
            self.EMDB_ID = value
            self.EMDB_ID = ' '.join(self.EMDB_ID.split())
            self.validate_emdb_id_type(self.EMDB_ID)    # validate type emdb_id_type
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DBs_list':
            obj_ = DBs_listType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DBs_list = obj_
            obj_.original_tagname_ = 'DBs_list'
        elif nodeName_ == 'molecular_weight_annotation':
            obj_ = molecular_weight_annotationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.molecular_weight_annotation = obj_
            obj_.original_tagname_ = 'molecular_weight_annotation'
        elif nodeName_ == 'sample_annotation':
            obj_ = sample_annotationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.sample_annotation = obj_
            obj_.original_tagname_ = 'sample_annotation'
# end class emicss


class DBs_listType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DB=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if DB is None:
            self.DB = []
        else:
            self.DB = DB
        self.DB_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DBs_listType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DBs_listType.subclass:
            return DBs_listType.subclass(*args_, **kwargs_)
        else:
            return DBs_listType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DB(self):
        return self.DB
    def set_DB(self, DB):
        self.DB = DB
    def add_DB(self, value):
        self.DB.append(value)
    def insert_DB_at(self, index, value):
        self.DB.insert(index, value)
    def replace_DB_at(self, index, value):
        self.DB[index] = value
    def hasContent_(self):
        if (
            self.DB
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DBs_listType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DBs_listType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DBs_listType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DBs_listType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DBs_listType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DBs_listType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DBs_listType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DB_ in self.DB:
            namespaceprefix_ = self.DB_nsprefix_ + ':' if (UseCapturedNS_ and self.DB_nsprefix_) else ''
            DB_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DB', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DB':
            obj_ = DBType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DB.append(obj_)
            obj_.original_tagname_ = 'DB'
# end class DBs_listType


class DBType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DB_source=None, DB_version=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DB_source = _cast(None, DB_source)
        self.DB_source_nsprefix_ = None
        self.DB_version = _cast(None, DB_version)
        self.DB_version_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DBType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DBType.subclass:
            return DBType.subclass(*args_, **kwargs_)
        else:
            return DBType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DB_source(self):
        return self.DB_source
    def set_DB_source(self, DB_source):
        self.DB_source = DB_source
    def get_DB_version(self):
        return self.DB_version
    def set_DB_version(self, DB_version):
        self.DB_version = DB_version
    def validate_DB_source_type(self, value):
        # Validate type DB_source_type, a restriction on xs:token.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['UNIPROT', 'COMPLEXPORTAL', 'PDBe', 'CHEMBL', 'CHEBI', 'DRUGBANK']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DB_source_type' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DBType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DBType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DBType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DBType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DBType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DBType'):
        if self.DB_source is not None and 'DB_source' not in already_processed:
            already_processed.add('DB_source')
            outfile.write(' DB_source=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DB_source), input_name='DB_source')), ))
        if self.DB_version is not None and 'DB_version' not in already_processed:
            already_processed.add('DB_version')
            outfile.write(' DB_version=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DB_version), input_name='DB_version')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DBType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DB_source', node)
        if value is not None and 'DB_source' not in already_processed:
            already_processed.add('DB_source')
            self.DB_source = value
            self.DB_source = ' '.join(self.DB_source.split())
            self.validate_DB_source_type(self.DB_source)    # validate type DB_source_type
        value = find_attr_value_('DB_version', node)
        if value is not None and 'DB_version' not in already_processed:
            already_processed.add('DB_version')
            self.DB_version = value
            self.DB_version = ' '.join(self.DB_version.split())
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class DBType


class molecular_weight_annotationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, models_list=None, weight_list=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.models_list = models_list
        self.models_list_nsprefix_ = None
        self.weight_list = weight_list
        self.weight_list_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, molecular_weight_annotationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if molecular_weight_annotationType.subclass:
            return molecular_weight_annotationType.subclass(*args_, **kwargs_)
        else:
            return molecular_weight_annotationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_models_list(self):
        return self.models_list
    def set_models_list(self, models_list):
        self.models_list = models_list
    def get_weight_list(self):
        return self.weight_list
    def set_weight_list(self, weight_list):
        self.weight_list = weight_list
    def hasContent_(self):
        if (
            self.models_list is not None or
            self.weight_list is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='molecular_weight_annotationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('molecular_weight_annotationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'molecular_weight_annotationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='molecular_weight_annotationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='molecular_weight_annotationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='molecular_weight_annotationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='molecular_weight_annotationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.models_list is not None:
            namespaceprefix_ = self.models_list_nsprefix_ + ':' if (UseCapturedNS_ and self.models_list_nsprefix_) else ''
            self.models_list.export(outfile, level, namespaceprefix_, namespacedef_='', name_='models_list', pretty_print=pretty_print)
        if self.weight_list is not None:
            namespaceprefix_ = self.weight_list_nsprefix_ + ':' if (UseCapturedNS_ and self.weight_list_nsprefix_) else ''
            self.weight_list.export(outfile, level, namespaceprefix_, namespacedef_='', name_='weight_list', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'models_list':
            obj_ = models_listType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.models_list = obj_
            obj_.original_tagname_ = 'models_list'
        elif nodeName_ == 'weight_list':
            obj_ = weight_listType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.weight_list = obj_
            obj_.original_tagname_ = 'weight_list'
# end class molecular_weight_annotationType


class models_listType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, model_annotation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if model_annotation is None:
            self.model_annotation = []
        else:
            self.model_annotation = model_annotation
        self.model_annotation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, models_listType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if models_listType.subclass:
            return models_listType.subclass(*args_, **kwargs_)
        else:
            return models_listType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_model_annotation(self):
        return self.model_annotation
    def set_model_annotation(self, model_annotation):
        self.model_annotation = model_annotation
    def add_model_annotation(self, value):
        self.model_annotation.append(value)
    def insert_model_annotation_at(self, index, value):
        self.model_annotation.insert(index, value)
    def replace_model_annotation_at(self, index, value):
        self.model_annotation[index] = value
    def hasContent_(self):
        if (
            self.model_annotation
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='models_listType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('models_listType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'models_listType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='models_listType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='models_listType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='models_listType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='models_listType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for model_annotation_ in self.model_annotation:
            namespaceprefix_ = self.model_annotation_nsprefix_ + ':' if (UseCapturedNS_ and self.model_annotation_nsprefix_) else ''
            model_annotation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='model_annotation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'model_annotation':
            obj_ = model_annotationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.model_annotation.append(obj_)
            obj_.original_tagname_ = 'model_annotation'
# end class models_listType


class model_annotationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PDBID=None, assemblies=None, weight=None, units=None, provenance=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PDBID = _cast(None, PDBID)
        self.PDBID_nsprefix_ = None
        self.assemblies = _cast(int, assemblies)
        self.assemblies_nsprefix_ = None
        self.weight = _cast(None, weight)
        self.weight_nsprefix_ = None
        self.units = _cast(None, units)
        self.units_nsprefix_ = None
        self.provenance = _cast(None, provenance)
        self.provenance_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, model_annotationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if model_annotationType.subclass:
            return model_annotationType.subclass(*args_, **kwargs_)
        else:
            return model_annotationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PDBID(self):
        return self.PDBID
    def set_PDBID(self, PDBID):
        self.PDBID = PDBID
    def get_assemblies(self):
        return self.assemblies
    def set_assemblies(self, assemblies):
        self.assemblies = assemblies
    def get_weight(self):
        return self.weight
    def set_weight(self, weight):
        self.weight = weight
    def get_units(self):
        return self.units
    def set_units(self, units):
        self.units = units
    def get_provenance(self):
        return self.provenance
    def set_provenance(self, provenance):
        self.provenance = provenance
    def validate_PDBIDType(self, value):
        # Validate type PDBIDType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on PDBIDType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_provenance_type(self, value):
        # Validate type provenance_type, a restriction on xs:token.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AUTHOR', 'UNIPROT', 'PDBe', 'PDB+UNIPROT', 'BLASTP', 'COMPLEXPORTAL', 'ChEMBL', 'ChEBI', 'DrugBank', 'CALCULATED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on provenance_type' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='model_annotationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('model_annotationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'model_annotationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='model_annotationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='model_annotationType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='model_annotationType'):
        if self.PDBID is not None and 'PDBID' not in already_processed:
            already_processed.add('PDBID')
            outfile.write(' PDBID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.PDBID), input_name='PDBID')), ))
        if self.assemblies is not None and 'assemblies' not in already_processed:
            already_processed.add('assemblies')
            outfile.write(' assemblies="%s"' % self.gds_format_integer(self.assemblies, input_name='assemblies'))
        if self.weight is not None and 'weight' not in already_processed:
            already_processed.add('weight')
            outfile.write(' weight=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.weight), input_name='weight')), ))
        if self.units is not None and 'units' not in already_processed:
            already_processed.add('units')
            outfile.write(' units=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.units), input_name='units')), ))
        if self.provenance is not None and 'provenance' not in already_processed:
            already_processed.add('provenance')
            outfile.write(' provenance=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.provenance), input_name='provenance')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='model_annotationType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('PDBID', node)
        if value is not None and 'PDBID' not in already_processed:
            already_processed.add('PDBID')
            self.PDBID = value
            self.validate_PDBIDType(self.PDBID)    # validate type PDBIDType
        value = find_attr_value_('assemblies', node)
        if value is not None and 'assemblies' not in already_processed:
            already_processed.add('assemblies')
            self.assemblies = self.gds_parse_integer(value, node, 'assemblies')
            if self.assemblies < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
        value = find_attr_value_('weight', node)
        if value is not None and 'weight' not in already_processed:
            already_processed.add('weight')
            self.weight = value
        value = find_attr_value_('units', node)
        if value is not None and 'units' not in already_processed:
            already_processed.add('units')
            self.units = value
        value = find_attr_value_('provenance', node)
        if value is not None and 'provenance' not in already_processed:
            already_processed.add('provenance')
            self.provenance = value
            self.provenance = ' '.join(self.provenance.split())
            self.validate_provenance_type(self.provenance)    # validate type provenance_type
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class model_annotationType


class weight_listType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, provided_weight=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if provided_weight is None:
            self.provided_weight = []
        else:
            self.provided_weight = provided_weight
        self.provided_weight_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, weight_listType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if weight_listType.subclass:
            return weight_listType.subclass(*args_, **kwargs_)
        else:
            return weight_listType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_provided_weight(self):
        return self.provided_weight
    def set_provided_weight(self, provided_weight):
        self.provided_weight = provided_weight
    def add_provided_weight(self, value):
        self.provided_weight.append(value)
    def insert_provided_weight_at(self, index, value):
        self.provided_weight.insert(index, value)
    def replace_provided_weight_at(self, index, value):
        self.provided_weight[index] = value
    def hasContent_(self):
        if (
            self.provided_weight
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='weight_listType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('weight_listType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'weight_listType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='weight_listType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='weight_listType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='weight_listType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='weight_listType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for provided_weight_ in self.provided_weight:
            namespaceprefix_ = self.provided_weight_nsprefix_ + ':' if (UseCapturedNS_ and self.provided_weight_nsprefix_) else ''
            provided_weight_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='provided_weight', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'provided_weight':
            obj_ = provided_weightType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.provided_weight.append(obj_)
            obj_.original_tagname_ = 'provided_weight'
# end class weight_listType


class provided_weightType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PDBID=None, weight=None, units=None, provenance=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PDBID = _cast(None, PDBID)
        self.PDBID_nsprefix_ = None
        self.weight = _cast(None, weight)
        self.weight_nsprefix_ = None
        self.units = _cast(None, units)
        self.units_nsprefix_ = None
        self.provenance = _cast(None, provenance)
        self.provenance_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, provided_weightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if provided_weightType.subclass:
            return provided_weightType.subclass(*args_, **kwargs_)
        else:
            return provided_weightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PDBID(self):
        return self.PDBID
    def set_PDBID(self, PDBID):
        self.PDBID = PDBID
    def get_weight(self):
        return self.weight
    def set_weight(self, weight):
        self.weight = weight
    def get_units(self):
        return self.units
    def set_units(self, units):
        self.units = units
    def get_provenance(self):
        return self.provenance
    def set_provenance(self, provenance):
        self.provenance = provenance
    def validate_provenance_type(self, value):
        # Validate type provenance_type, a restriction on xs:token.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AUTHOR', 'UNIPROT', 'PDBe', 'PDB+UNIPROT', 'BLASTP', 'COMPLEXPORTAL', 'ChEMBL', 'ChEBI', 'DrugBank', 'CALCULATED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on provenance_type' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='provided_weightType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('provided_weightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'provided_weightType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='provided_weightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='provided_weightType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='provided_weightType'):
        if self.PDBID is not None and 'PDBID' not in already_processed:
            already_processed.add('PDBID')
            outfile.write(' PDBID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.PDBID), input_name='PDBID')), ))
        if self.weight is not None and 'weight' not in already_processed:
            already_processed.add('weight')
            outfile.write(' weight=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.weight), input_name='weight')), ))
        if self.units is not None and 'units' not in already_processed:
            already_processed.add('units')
            outfile.write(' units=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.units), input_name='units')), ))
        if self.provenance is not None and 'provenance' not in already_processed:
            already_processed.add('provenance')
            outfile.write(' provenance=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.provenance), input_name='provenance')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='provided_weightType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('PDBID', node)
        if value is not None and 'PDBID' not in already_processed:
            already_processed.add('PDBID')
            self.PDBID = value
        value = find_attr_value_('weight', node)
        if value is not None and 'weight' not in already_processed:
            already_processed.add('weight')
            self.weight = value
        value = find_attr_value_('units', node)
        if value is not None and 'units' not in already_processed:
            already_processed.add('units')
            self.units = value
        value = find_attr_value_('provenance', node)
        if value is not None and 'provenance' not in already_processed:
            already_processed.add('provenance')
            self.provenance = value
            self.provenance = ' '.join(self.provenance.split())
            self.validate_provenance_type(self.provenance)    # validate type provenance_type
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class provided_weightType


class sample_annotationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, sample_name=None, list_crossRefDBs=None, list_supra_molecules=None, list_macro_molecules=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.sample_name = sample_name
        self.sample_name_nsprefix_ = None
        self.list_crossRefDBs = list_crossRefDBs
        self.list_crossRefDBs_nsprefix_ = None
        self.list_supra_molecules = list_supra_molecules
        self.list_supra_molecules_nsprefix_ = None
        self.list_macro_molecules = list_macro_molecules
        self.list_macro_molecules_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, sample_annotationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if sample_annotationType.subclass:
            return sample_annotationType.subclass(*args_, **kwargs_)
        else:
            return sample_annotationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_sample_name(self):
        return self.sample_name
    def set_sample_name(self, sample_name):
        self.sample_name = sample_name
    def get_list_crossRefDBs(self):
        return self.list_crossRefDBs
    def set_list_crossRefDBs(self, list_crossRefDBs):
        self.list_crossRefDBs = list_crossRefDBs
    def get_list_supra_molecules(self):
        return self.list_supra_molecules
    def set_list_supra_molecules(self, list_supra_molecules):
        self.list_supra_molecules = list_supra_molecules
    def get_list_macro_molecules(self):
        return self.list_macro_molecules
    def set_list_macro_molecules(self, list_macro_molecules):
        self.list_macro_molecules = list_macro_molecules
    def hasContent_(self):
        if (
            self.sample_name is not None or
            self.list_crossRefDBs is not None or
            self.list_supra_molecules is not None or
            self.list_macro_molecules is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='sample_annotationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('sample_annotationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'sample_annotationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='sample_annotationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='sample_annotationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='sample_annotationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='sample_annotationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.sample_name is not None:
            namespaceprefix_ = self.sample_name_nsprefix_ + ':' if (UseCapturedNS_ and self.sample_name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssample_name>%s</%ssample_name>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.sample_name), input_name='sample_name')), namespaceprefix_ , eol_))
        if self.list_crossRefDBs is not None:
            namespaceprefix_ = self.list_crossRefDBs_nsprefix_ + ':' if (UseCapturedNS_ and self.list_crossRefDBs_nsprefix_) else ''
            self.list_crossRefDBs.export(outfile, level, namespaceprefix_, namespacedef_='', name_='list_crossRefDBs', pretty_print=pretty_print)
        if self.list_supra_molecules is not None:
            namespaceprefix_ = self.list_supra_molecules_nsprefix_ + ':' if (UseCapturedNS_ and self.list_supra_molecules_nsprefix_) else ''
            self.list_supra_molecules.export(outfile, level, namespaceprefix_, namespacedef_='', name_='list_supra_molecules', pretty_print=pretty_print)
        if self.list_macro_molecules is not None:
            namespaceprefix_ = self.list_macro_molecules_nsprefix_ + ':' if (UseCapturedNS_ and self.list_macro_molecules_nsprefix_) else ''
            self.list_macro_molecules.export(outfile, level, namespaceprefix_, namespacedef_='', name_='list_macro_molecules', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'sample_name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'sample_name')
            value_ = self.gds_validate_string(value_, node, 'sample_name')
            self.sample_name = value_
            self.sample_name_nsprefix_ = child_.prefix
        elif nodeName_ == 'list_crossRefDBs':
            obj_ = list_crossRefDBsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.list_crossRefDBs = obj_
            obj_.original_tagname_ = 'list_crossRefDBs'
        elif nodeName_ == 'list_supra_molecules':
            obj_ = list_supra_moleculesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.list_supra_molecules = obj_
            obj_.original_tagname_ = 'list_supra_molecules'
        elif nodeName_ == 'list_macro_molecules':
            obj_ = list_macro_moleculesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.list_macro_molecules = obj_
            obj_.original_tagname_ = 'list_macro_molecules'
# end class sample_annotationType


class list_crossRefDBsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, crossRefDB=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if crossRefDB is None:
            self.crossRefDB = []
        else:
            self.crossRefDB = crossRefDB
        self.crossRefDB_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, list_crossRefDBsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if list_crossRefDBsType.subclass:
            return list_crossRefDBsType.subclass(*args_, **kwargs_)
        else:
            return list_crossRefDBsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_crossRefDB(self):
        return self.crossRefDB
    def set_crossRefDB(self, crossRefDB):
        self.crossRefDB = crossRefDB
    def add_crossRefDB(self, value):
        self.crossRefDB.append(value)
    def insert_crossRefDB_at(self, index, value):
        self.crossRefDB.insert(index, value)
    def replace_crossRefDB_at(self, index, value):
        self.crossRefDB[index] = value
    def hasContent_(self):
        if (
            self.crossRefDB
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='list_crossRefDBsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('list_crossRefDBsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'list_crossRefDBsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='list_crossRefDBsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='list_crossRefDBsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='list_crossRefDBsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='list_crossRefDBsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for crossRefDB_ in self.crossRefDB:
            namespaceprefix_ = self.crossRefDB_nsprefix_ + ':' if (UseCapturedNS_ and self.crossRefDB_nsprefix_) else ''
            crossRefDB_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='crossRefDB', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'crossRefDB':
            obj_ = crossRefDBType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.crossRefDB.append(obj_)
            obj_.original_tagname_ = 'crossRefDB'
# end class list_crossRefDBsType


class crossRefDBType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, name=None, DB_source=None, provenance=None, DB_accession_ID=None, score=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.DB_source = _cast(None, DB_source)
        self.DB_source_nsprefix_ = None
        self.provenance = _cast(None, provenance)
        self.provenance_nsprefix_ = None
        self.DB_accession_ID = _cast(None, DB_accession_ID)
        self.DB_accession_ID_nsprefix_ = None
        self.score = _cast(float, score)
        self.score_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, crossRefDBType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if crossRefDBType.subclass:
            return crossRefDBType.subclass(*args_, **kwargs_)
        else:
            return crossRefDBType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_DB_source(self):
        return self.DB_source
    def set_DB_source(self, DB_source):
        self.DB_source = DB_source
    def get_provenance(self):
        return self.provenance
    def set_provenance(self, provenance):
        self.provenance = provenance
    def get_DB_accession_ID(self):
        return self.DB_accession_ID
    def set_DB_accession_ID(self, DB_accession_ID):
        self.DB_accession_ID = DB_accession_ID
    def get_score(self):
        return self.score
    def set_score(self, score):
        self.score = score
    def validate_DB_source_type(self, value):
        # Validate type DB_source_type, a restriction on xs:token.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['UNIPROT', 'COMPLEXPORTAL', 'PDBe', 'CHEMBL', 'CHEBI', 'DRUGBANK']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DB_source_type' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_provenance_type(self, value):
        # Validate type provenance_type, a restriction on xs:token.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AUTHOR', 'UNIPROT', 'PDBe', 'PDB+UNIPROT', 'BLASTP', 'COMPLEXPORTAL', 'ChEMBL', 'ChEBI', 'DrugBank', 'CALCULATED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on provenance_type' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='crossRefDBType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('crossRefDBType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'crossRefDBType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='crossRefDBType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='crossRefDBType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='crossRefDBType'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.DB_source is not None and 'DB_source' not in already_processed:
            already_processed.add('DB_source')
            outfile.write(' DB_source=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DB_source), input_name='DB_source')), ))
        if self.provenance is not None and 'provenance' not in already_processed:
            already_processed.add('provenance')
            outfile.write(' provenance=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.provenance), input_name='provenance')), ))
        if self.DB_accession_ID is not None and 'DB_accession_ID' not in already_processed:
            already_processed.add('DB_accession_ID')
            outfile.write(' DB_accession_ID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DB_accession_ID), input_name='DB_accession_ID')), ))
        if self.score is not None and 'score' not in already_processed:
            already_processed.add('score')
            outfile.write(' score="%s"' % self.gds_format_float(self.score, input_name='score'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='crossRefDBType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('DB_source', node)
        if value is not None and 'DB_source' not in already_processed:
            already_processed.add('DB_source')
            self.DB_source = value
            self.DB_source = ' '.join(self.DB_source.split())
            self.validate_DB_source_type(self.DB_source)    # validate type DB_source_type
        value = find_attr_value_('provenance', node)
        if value is not None and 'provenance' not in already_processed:
            already_processed.add('provenance')
            self.provenance = value
            self.provenance = ' '.join(self.provenance.split())
            self.validate_provenance_type(self.provenance)    # validate type provenance_type
        value = find_attr_value_('DB_accession_ID', node)
        if value is not None and 'DB_accession_ID' not in already_processed:
            already_processed.add('DB_accession_ID')
            self.DB_accession_ID = value
        value = find_attr_value_('score', node)
        if value is not None and 'score' not in already_processed:
            already_processed.add('score')
            value = self.gds_parse_float(value, node, 'score')
            self.score = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class crossRefDBType


class list_supra_moleculesType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, supra_molecule_annotation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if supra_molecule_annotation is None:
            self.supra_molecule_annotation = []
        else:
            self.supra_molecule_annotation = supra_molecule_annotation
        self.supra_molecule_annotation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, list_supra_moleculesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if list_supra_moleculesType.subclass:
            return list_supra_moleculesType.subclass(*args_, **kwargs_)
        else:
            return list_supra_moleculesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_supra_molecule_annotation(self):
        return self.supra_molecule_annotation
    def set_supra_molecule_annotation(self, supra_molecule_annotation):
        self.supra_molecule_annotation = supra_molecule_annotation
    def add_supra_molecule_annotation(self, value):
        self.supra_molecule_annotation.append(value)
    def insert_supra_molecule_annotation_at(self, index, value):
        self.supra_molecule_annotation.insert(index, value)
    def replace_supra_molecule_annotation_at(self, index, value):
        self.supra_molecule_annotation[index] = value
    def hasContent_(self):
        if (
            self.supra_molecule_annotation
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='list_supra_moleculesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('list_supra_moleculesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'list_supra_moleculesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='list_supra_moleculesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='list_supra_moleculesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='list_supra_moleculesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='list_supra_moleculesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for supra_molecule_annotation_ in self.supra_molecule_annotation:
            namespaceprefix_ = self.supra_molecule_annotation_nsprefix_ + ':' if (UseCapturedNS_ and self.supra_molecule_annotation_nsprefix_) else ''
            supra_molecule_annotation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='supra_molecule_annotation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'supra_molecule_annotation':
            obj_ = supra_molecule_annotationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.supra_molecule_annotation.append(obj_)
            obj_.original_tagname_ = 'supra_molecule_annotation'
# end class list_supra_moleculesType


class supra_molecule_annotationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, supra_kind=None, supra_ID=None, supra_copies=None, supra_name=None, list_crossRefDBs=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.supra_kind = _cast(None, supra_kind)
        self.supra_kind_nsprefix_ = None
        self.supra_ID = _cast(int, supra_ID)
        self.supra_ID_nsprefix_ = None
        self.supra_copies = _cast(int, supra_copies)
        self.supra_copies_nsprefix_ = None
        self.supra_name = supra_name
        self.supra_name_nsprefix_ = None
        self.list_crossRefDBs = list_crossRefDBs
        self.list_crossRefDBs_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, supra_molecule_annotationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if supra_molecule_annotationType.subclass:
            return supra_molecule_annotationType.subclass(*args_, **kwargs_)
        else:
            return supra_molecule_annotationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_supra_name(self):
        return self.supra_name
    def set_supra_name(self, supra_name):
        self.supra_name = supra_name
    def get_list_crossRefDBs(self):
        return self.list_crossRefDBs
    def set_list_crossRefDBs(self, list_crossRefDBs):
        self.list_crossRefDBs = list_crossRefDBs
    def get_supra_kind(self):
        return self.supra_kind
    def set_supra_kind(self, supra_kind):
        self.supra_kind = supra_kind
    def get_supra_ID(self):
        return self.supra_ID
    def set_supra_ID(self, supra_ID):
        self.supra_ID = supra_ID
    def get_supra_copies(self):
        return self.supra_copies
    def set_supra_copies(self, supra_copies):
        self.supra_copies = supra_copies
    def validate_sample_kind(self, value):
        # Validate type sample_kind, a restriction on xs:token.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['complex', 'protein', 'ligand']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on sample_kind' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def hasContent_(self):
        if (
            self.supra_name is not None or
            self.list_crossRefDBs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='supra_molecule_annotationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('supra_molecule_annotationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'supra_molecule_annotationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='supra_molecule_annotationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='supra_molecule_annotationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='supra_molecule_annotationType'):
        if self.supra_kind is not None and 'supra_kind' not in already_processed:
            already_processed.add('supra_kind')
            outfile.write(' supra_kind=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.supra_kind), input_name='supra_kind')), ))
        if self.supra_ID is not None and 'supra_ID' not in already_processed:
            already_processed.add('supra_ID')
            outfile.write(' supra_ID="%s"' % self.gds_format_integer(self.supra_ID, input_name='supra_ID'))
        if self.supra_copies is not None and 'supra_copies' not in already_processed:
            already_processed.add('supra_copies')
            outfile.write(' supra_copies="%s"' % self.gds_format_integer(self.supra_copies, input_name='supra_copies'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='supra_molecule_annotationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.supra_name is not None:
            namespaceprefix_ = self.supra_name_nsprefix_ + ':' if (UseCapturedNS_ and self.supra_name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssupra_name>%s</%ssupra_name>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.supra_name), input_name='supra_name')), namespaceprefix_ , eol_))
        if self.list_crossRefDBs is not None:
            namespaceprefix_ = self.list_crossRefDBs_nsprefix_ + ':' if (UseCapturedNS_ and self.list_crossRefDBs_nsprefix_) else ''
            self.list_crossRefDBs.export(outfile, level, namespaceprefix_, namespacedef_='', name_='list_crossRefDBs', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('supra_kind', node)
        if value is not None and 'supra_kind' not in already_processed:
            already_processed.add('supra_kind')
            self.supra_kind = value
            self.supra_kind = ' '.join(self.supra_kind.split())
            self.validate_sample_kind(self.supra_kind)    # validate type sample_kind
        value = find_attr_value_('supra_ID', node)
        if value is not None and 'supra_ID' not in already_processed:
            already_processed.add('supra_ID')
            self.supra_ID = self.gds_parse_integer(value, node, 'supra_ID')
            if self.supra_ID < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
        value = find_attr_value_('supra_copies', node)
        if value is not None and 'supra_copies' not in already_processed:
            already_processed.add('supra_copies')
            self.supra_copies = self.gds_parse_integer(value, node, 'supra_copies')
            if self.supra_copies < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'supra_name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'supra_name')
            value_ = self.gds_validate_string(value_, node, 'supra_name')
            self.supra_name = value_
            self.supra_name_nsprefix_ = child_.prefix
        elif nodeName_ == 'list_crossRefDBs':
            obj_ = list_crossRefDBsType1.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.list_crossRefDBs = obj_
            obj_.original_tagname_ = 'list_crossRefDBs'
# end class supra_molecule_annotationType


class list_crossRefDBsType1(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, crossRefDB=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if crossRefDB is None:
            self.crossRefDB = []
        else:
            self.crossRefDB = crossRefDB
        self.crossRefDB_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, list_crossRefDBsType1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if list_crossRefDBsType1.subclass:
            return list_crossRefDBsType1.subclass(*args_, **kwargs_)
        else:
            return list_crossRefDBsType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_crossRefDB(self):
        return self.crossRefDB
    def set_crossRefDB(self, crossRefDB):
        self.crossRefDB = crossRefDB
    def add_crossRefDB(self, value):
        self.crossRefDB.append(value)
    def insert_crossRefDB_at(self, index, value):
        self.crossRefDB.insert(index, value)
    def replace_crossRefDB_at(self, index, value):
        self.crossRefDB[index] = value
    def hasContent_(self):
        if (
            self.crossRefDB
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='list_crossRefDBsType1', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('list_crossRefDBsType1')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'list_crossRefDBsType1':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='list_crossRefDBsType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='list_crossRefDBsType1', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='list_crossRefDBsType1'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='list_crossRefDBsType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for crossRefDB_ in self.crossRefDB:
            namespaceprefix_ = self.crossRefDB_nsprefix_ + ':' if (UseCapturedNS_ and self.crossRefDB_nsprefix_) else ''
            crossRefDB_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='crossRefDB', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'crossRefDB':
            obj_ = crossRefDBType2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.crossRefDB.append(obj_)
            obj_.original_tagname_ = 'crossRefDB'
# end class list_crossRefDBsType1


class crossRefDBType2(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, name=None, DB_source=None, provenance=None, DB_accession_ID=None, score=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.DB_source = _cast(None, DB_source)
        self.DB_source_nsprefix_ = None
        self.provenance = _cast(None, provenance)
        self.provenance_nsprefix_ = None
        self.DB_accession_ID = _cast(None, DB_accession_ID)
        self.DB_accession_ID_nsprefix_ = None
        self.score = _cast(float, score)
        self.score_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, crossRefDBType2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if crossRefDBType2.subclass:
            return crossRefDBType2.subclass(*args_, **kwargs_)
        else:
            return crossRefDBType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_DB_source(self):
        return self.DB_source
    def set_DB_source(self, DB_source):
        self.DB_source = DB_source
    def get_provenance(self):
        return self.provenance
    def set_provenance(self, provenance):
        self.provenance = provenance
    def get_DB_accession_ID(self):
        return self.DB_accession_ID
    def set_DB_accession_ID(self, DB_accession_ID):
        self.DB_accession_ID = DB_accession_ID
    def get_score(self):
        return self.score
    def set_score(self, score):
        self.score = score
    def validate_DB_source_type(self, value):
        # Validate type DB_source_type, a restriction on xs:token.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['UNIPROT', 'COMPLEXPORTAL', 'PDBe', 'CHEMBL', 'CHEBI', 'DRUGBANK']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DB_source_type' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_provenance_type(self, value):
        # Validate type provenance_type, a restriction on xs:token.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AUTHOR', 'UNIPROT', 'PDBe', 'PDB+UNIPROT', 'BLASTP', 'COMPLEXPORTAL', 'ChEMBL', 'ChEBI', 'DrugBank', 'CALCULATED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on provenance_type' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='crossRefDBType2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('crossRefDBType2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'crossRefDBType2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='crossRefDBType2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='crossRefDBType2', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='crossRefDBType2'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.DB_source is not None and 'DB_source' not in already_processed:
            already_processed.add('DB_source')
            outfile.write(' DB_source=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DB_source), input_name='DB_source')), ))
        if self.provenance is not None and 'provenance' not in already_processed:
            already_processed.add('provenance')
            outfile.write(' provenance=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.provenance), input_name='provenance')), ))
        if self.DB_accession_ID is not None and 'DB_accession_ID' not in already_processed:
            already_processed.add('DB_accession_ID')
            outfile.write(' DB_accession_ID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DB_accession_ID), input_name='DB_accession_ID')), ))
        if self.score is not None and 'score' not in already_processed:
            already_processed.add('score')
            outfile.write(' score="%s"' % self.gds_format_float(self.score, input_name='score'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='crossRefDBType2', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('DB_source', node)
        if value is not None and 'DB_source' not in already_processed:
            already_processed.add('DB_source')
            self.DB_source = value
            self.DB_source = ' '.join(self.DB_source.split())
            self.validate_DB_source_type(self.DB_source)    # validate type DB_source_type
        value = find_attr_value_('provenance', node)
        if value is not None and 'provenance' not in already_processed:
            already_processed.add('provenance')
            self.provenance = value
            self.provenance = ' '.join(self.provenance.split())
            self.validate_provenance_type(self.provenance)    # validate type provenance_type
        value = find_attr_value_('DB_accession_ID', node)
        if value is not None and 'DB_accession_ID' not in already_processed:
            already_processed.add('DB_accession_ID')
            self.DB_accession_ID = value
        value = find_attr_value_('score', node)
        if value is not None and 'score' not in already_processed:
            already_processed.add('score')
            value = self.gds_parse_float(value, node, 'score')
            self.score = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class crossRefDBType2


class list_macro_moleculesType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, macro_molecule_annotation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if macro_molecule_annotation is None:
            self.macro_molecule_annotation = []
        else:
            self.macro_molecule_annotation = macro_molecule_annotation
        self.macro_molecule_annotation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, list_macro_moleculesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if list_macro_moleculesType.subclass:
            return list_macro_moleculesType.subclass(*args_, **kwargs_)
        else:
            return list_macro_moleculesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_macro_molecule_annotation(self):
        return self.macro_molecule_annotation
    def set_macro_molecule_annotation(self, macro_molecule_annotation):
        self.macro_molecule_annotation = macro_molecule_annotation
    def add_macro_molecule_annotation(self, value):
        self.macro_molecule_annotation.append(value)
    def insert_macro_molecule_annotation_at(self, index, value):
        self.macro_molecule_annotation.insert(index, value)
    def replace_macro_molecule_annotation_at(self, index, value):
        self.macro_molecule_annotation[index] = value
    def hasContent_(self):
        if (
            self.macro_molecule_annotation
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='list_macro_moleculesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('list_macro_moleculesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'list_macro_moleculesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='list_macro_moleculesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='list_macro_moleculesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='list_macro_moleculesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='list_macro_moleculesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for macro_molecule_annotation_ in self.macro_molecule_annotation:
            namespaceprefix_ = self.macro_molecule_annotation_nsprefix_ + ':' if (UseCapturedNS_ and self.macro_molecule_annotation_nsprefix_) else ''
            macro_molecule_annotation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='macro_molecule_annotation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'macro_molecule_annotation':
            obj_ = macro_molecule_annotationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.macro_molecule_annotation.append(obj_)
            obj_.original_tagname_ = 'macro_molecule_annotation'
# end class list_macro_moleculesType


class macro_molecule_annotationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, macro_kind=None, macro_ID=None, macro_copies=None, macro_name=None, macro_CCD_ID=None, list_crossRefDBs=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.macro_kind = _cast(None, macro_kind)
        self.macro_kind_nsprefix_ = None
        self.macro_ID = _cast(int, macro_ID)
        self.macro_ID_nsprefix_ = None
        self.macro_copies = _cast(int, macro_copies)
        self.macro_copies_nsprefix_ = None
        self.macro_name = macro_name
        self.macro_name_nsprefix_ = None
        self.macro_CCD_ID = macro_CCD_ID
        self.macro_CCD_ID_nsprefix_ = None
        self.list_crossRefDBs = list_crossRefDBs
        self.list_crossRefDBs_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, macro_molecule_annotationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if macro_molecule_annotationType.subclass:
            return macro_molecule_annotationType.subclass(*args_, **kwargs_)
        else:
            return macro_molecule_annotationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_macro_name(self):
        return self.macro_name
    def set_macro_name(self, macro_name):
        self.macro_name = macro_name
    def get_macro_CCD_ID(self):
        return self.macro_CCD_ID
    def set_macro_CCD_ID(self, macro_CCD_ID):
        self.macro_CCD_ID = macro_CCD_ID
    def get_list_crossRefDBs(self):
        return self.list_crossRefDBs
    def set_list_crossRefDBs(self, list_crossRefDBs):
        self.list_crossRefDBs = list_crossRefDBs
    def get_macro_kind(self):
        return self.macro_kind
    def set_macro_kind(self, macro_kind):
        self.macro_kind = macro_kind
    def get_macro_ID(self):
        return self.macro_ID
    def set_macro_ID(self, macro_ID):
        self.macro_ID = macro_ID
    def get_macro_copies(self):
        return self.macro_copies
    def set_macro_copies(self, macro_copies):
        self.macro_copies = macro_copies
    def validate_sample_kind(self, value):
        # Validate type sample_kind, a restriction on xs:token.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['complex', 'protein', 'ligand']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on sample_kind' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def hasContent_(self):
        if (
            self.macro_name is not None or
            self.macro_CCD_ID is not None or
            self.list_crossRefDBs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='macro_molecule_annotationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('macro_molecule_annotationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'macro_molecule_annotationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='macro_molecule_annotationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='macro_molecule_annotationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='macro_molecule_annotationType'):
        if self.macro_kind is not None and 'macro_kind' not in already_processed:
            already_processed.add('macro_kind')
            outfile.write(' macro_kind=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.macro_kind), input_name='macro_kind')), ))
        if self.macro_ID is not None and 'macro_ID' not in already_processed:
            already_processed.add('macro_ID')
            outfile.write(' macro_ID="%s"' % self.gds_format_integer(self.macro_ID, input_name='macro_ID'))
        if self.macro_copies is not None and 'macro_copies' not in already_processed:
            already_processed.add('macro_copies')
            outfile.write(' macro_copies="%s"' % self.gds_format_integer(self.macro_copies, input_name='macro_copies'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='macro_molecule_annotationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.macro_name is not None:
            namespaceprefix_ = self.macro_name_nsprefix_ + ':' if (UseCapturedNS_ and self.macro_name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smacro_name>%s</%smacro_name>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.macro_name), input_name='macro_name')), namespaceprefix_ , eol_))
        if self.macro_CCD_ID is not None:
            namespaceprefix_ = self.macro_CCD_ID_nsprefix_ + ':' if (UseCapturedNS_ and self.macro_CCD_ID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smacro_CCD_ID>%s</%smacro_CCD_ID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.macro_CCD_ID), input_name='macro_CCD_ID')), namespaceprefix_ , eol_))
        if self.list_crossRefDBs is not None:
            namespaceprefix_ = self.list_crossRefDBs_nsprefix_ + ':' if (UseCapturedNS_ and self.list_crossRefDBs_nsprefix_) else ''
            self.list_crossRefDBs.export(outfile, level, namespaceprefix_, namespacedef_='', name_='list_crossRefDBs', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('macro_kind', node)
        if value is not None and 'macro_kind' not in already_processed:
            already_processed.add('macro_kind')
            self.macro_kind = value
            self.macro_kind = ' '.join(self.macro_kind.split())
            self.validate_sample_kind(self.macro_kind)    # validate type sample_kind
        value = find_attr_value_('macro_ID', node)
        if value is not None and 'macro_ID' not in already_processed:
            already_processed.add('macro_ID')
            self.macro_ID = self.gds_parse_integer(value, node, 'macro_ID')
            if self.macro_ID < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
        value = find_attr_value_('macro_copies', node)
        if value is not None and 'macro_copies' not in already_processed:
            already_processed.add('macro_copies')
            self.macro_copies = self.gds_parse_integer(value, node, 'macro_copies')
            if self.macro_copies < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'macro_name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'macro_name')
            value_ = self.gds_validate_string(value_, node, 'macro_name')
            self.macro_name = value_
            self.macro_name_nsprefix_ = child_.prefix
        elif nodeName_ == 'macro_CCD_ID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'macro_CCD_ID')
            value_ = self.gds_validate_string(value_, node, 'macro_CCD_ID')
            self.macro_CCD_ID = value_
            self.macro_CCD_ID_nsprefix_ = child_.prefix
        elif nodeName_ == 'list_crossRefDBs':
            obj_ = list_crossRefDBsType3.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.list_crossRefDBs = obj_
            obj_.original_tagname_ = 'list_crossRefDBs'
# end class macro_molecule_annotationType


class list_crossRefDBsType3(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, crossRefDB=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if crossRefDB is None:
            self.crossRefDB = []
        else:
            self.crossRefDB = crossRefDB
        self.crossRefDB_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, list_crossRefDBsType3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if list_crossRefDBsType3.subclass:
            return list_crossRefDBsType3.subclass(*args_, **kwargs_)
        else:
            return list_crossRefDBsType3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_crossRefDB(self):
        return self.crossRefDB
    def set_crossRefDB(self, crossRefDB):
        self.crossRefDB = crossRefDB
    def add_crossRefDB(self, value):
        self.crossRefDB.append(value)
    def insert_crossRefDB_at(self, index, value):
        self.crossRefDB.insert(index, value)
    def replace_crossRefDB_at(self, index, value):
        self.crossRefDB[index] = value
    def hasContent_(self):
        if (
            self.crossRefDB
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='list_crossRefDBsType3', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('list_crossRefDBsType3')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'list_crossRefDBsType3':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='list_crossRefDBsType3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='list_crossRefDBsType3', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='list_crossRefDBsType3'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='list_crossRefDBsType3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for crossRefDB_ in self.crossRefDB:
            namespaceprefix_ = self.crossRefDB_nsprefix_ + ':' if (UseCapturedNS_ and self.crossRefDB_nsprefix_) else ''
            crossRefDB_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='crossRefDB', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'crossRefDB':
            obj_ = crossRefDBType4.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.crossRefDB.append(obj_)
            obj_.original_tagname_ = 'crossRefDB'
# end class list_crossRefDBsType3


class crossRefDBType4(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, name=None, DB_source=None, provenance=None, DB_accession_ID=None, score=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.DB_source = _cast(None, DB_source)
        self.DB_source_nsprefix_ = None
        self.provenance = _cast(None, provenance)
        self.provenance_nsprefix_ = None
        self.DB_accession_ID = _cast(None, DB_accession_ID)
        self.DB_accession_ID_nsprefix_ = None
        self.score = _cast(float, score)
        self.score_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, crossRefDBType4)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if crossRefDBType4.subclass:
            return crossRefDBType4.subclass(*args_, **kwargs_)
        else:
            return crossRefDBType4(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_DB_source(self):
        return self.DB_source
    def set_DB_source(self, DB_source):
        self.DB_source = DB_source
    def get_provenance(self):
        return self.provenance
    def set_provenance(self, provenance):
        self.provenance = provenance
    def get_DB_accession_ID(self):
        return self.DB_accession_ID
    def set_DB_accession_ID(self, DB_accession_ID):
        self.DB_accession_ID = DB_accession_ID
    def get_score(self):
        return self.score
    def set_score(self, score):
        self.score = score
    def validate_DB_source_type(self, value):
        # Validate type DB_source_type, a restriction on xs:token.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['UNIPROT', 'COMPLEXPORTAL', 'PDBe', 'CHEMBL', 'CHEBI', 'DRUGBANK']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DB_source_type' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_provenance_type(self, value):
        # Validate type provenance_type, a restriction on xs:token.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AUTHOR', 'UNIPROT', 'PDBe', 'PDB+UNIPROT', 'BLASTP', 'COMPLEXPORTAL', 'ChEMBL', 'ChEBI', 'DrugBank', 'CALCULATED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on provenance_type' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='crossRefDBType4', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('crossRefDBType4')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'crossRefDBType4':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='crossRefDBType4')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='crossRefDBType4', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='crossRefDBType4'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.DB_source is not None and 'DB_source' not in already_processed:
            already_processed.add('DB_source')
            outfile.write(' DB_source=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DB_source), input_name='DB_source')), ))
        if self.provenance is not None and 'provenance' not in already_processed:
            already_processed.add('provenance')
            outfile.write(' provenance=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.provenance), input_name='provenance')), ))
        if self.DB_accession_ID is not None and 'DB_accession_ID' not in already_processed:
            already_processed.add('DB_accession_ID')
            outfile.write(' DB_accession_ID=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DB_accession_ID), input_name='DB_accession_ID')), ))
        if self.score is not None and 'score' not in already_processed:
            already_processed.add('score')
            outfile.write(' score="%s"' % self.gds_format_float(self.score, input_name='score'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='crossRefDBType4', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('DB_source', node)
        if value is not None and 'DB_source' not in already_processed:
            already_processed.add('DB_source')
            self.DB_source = value
            self.DB_source = ' '.join(self.DB_source.split())
            self.validate_DB_source_type(self.DB_source)    # validate type DB_source_type
        value = find_attr_value_('provenance', node)
        if value is not None and 'provenance' not in already_processed:
            already_processed.add('provenance')
            self.provenance = value
            self.provenance = ' '.join(self.provenance.split())
            self.validate_provenance_type(self.provenance)    # validate type provenance_type
        value = find_attr_value_('DB_accession_ID', node)
        if value is not None and 'DB_accession_ID' not in already_processed:
            already_processed.add('DB_accession_ID')
            self.DB_accession_ID = value
        value = find_attr_value_('score', node)
        if value is not None and 'score' not in already_processed:
            already_processed.add('score')
            value = self.gds_parse_float(value, node, 'score')
            self.score = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class crossRefDBType4


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'emicss'
        rootClass = emicss
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True,
               mapping=None, nsmap=None):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'emicss'
        rootClass = emicss
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if mapping is None:
        mapping = {}
    rootElement = rootObj.to_etree(
        None, name_=rootTag, mapping_=mapping, nsmap_=nsmap)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'emicss'
        rootClass = emicss
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'emicss'
        rootClass = emicss
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from EMICSS import *\n\n')
        sys.stdout.write('import EMICSS as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
}

#
# Mapping of namespaces to types defined in them
# and the file in which each is defined.
# simpleTypes are marked "ST" and complexTypes "CT".
NamespaceToDefMappings_ = {}

__all__ = [
    "DBType",
    "DBs_listType",
    "crossRefDBType",
    "crossRefDBType2",
    "crossRefDBType4",
    "emicss",
    "list_crossRefDBsType",
    "list_crossRefDBsType1",
    "list_crossRefDBsType3",
    "list_macro_moleculesType",
    "list_supra_moleculesType",
    "macro_molecule_annotationType",
    "model_annotationType",
    "models_listType",
    "molecular_weight_annotationType",
    "provided_weightType",
    "sample_annotationType",
    "supra_molecule_annotationType",
    "weight_listType"
]
